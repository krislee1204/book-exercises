books_without_five <- remove_book(books,5)
print(books_without_five)
# Create a variable 'long_titles' for titles longer than 15 characters,
# and print the result
long_titles <- str_length(books) > 15
print(books[long_titles])
#################
#### PART 3 #####
#################
# Create a variable 'numbers' for a vector of numbers 1 to 201
numbers <- seq(1:201)
# Create a variable 'squared_numbers' with values in 'numbers' squared
squared_numbers <- numbers * numbers
# Create a variable 'squared_mean' with the average of 'squared_numbers'
# and print the result
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Create a variable 'squared_median' with the median of 'squared_numbers'
# and print the result
squared_median <- median(squared_numbers)
print(squared_median)
# Create a variable 'perfect_squares' with perfect squares in 'numbers'
# and print the result
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(numbers[perfect_squares])
#################
#### PART 4 #####
#################
# Create a variable 'spring_break' for the first day of Spring Break
spring_break <- as.Date("2020-03-21")
# Create a variable 'today' that represents the current date
today <- as.Date("2020-01-21")
# Create a variable 'days_to_break' that represents the amount of time
# from the current date until break and print the result
days_to_break <- difftime(spring_break, today)
print(days_to_break)
# Define a function 'change_year' that expects a date and year
# and returns a new date with the year passed through
change_year <- function(date, year){
date_as_string <- paste0(year, substr(as.character(date), 5, 10))
return(as.Date(date_as_string))
}
# Create a variable 'spring_break_2025' to test function 'change_year'
spring_break_2025 <- change_year(spring_break, 2025)
class(spring_break_2025)
# Define a function 'date_has_passed' that expects 1 argument, and returns a boolean for
# whether the event occurred already or not
current_date <- as.Date("2020-01-22")
date_has_passed <- function(passed_date){
occurred <- (current_date - passed_date) > 0
return(occurred)
}
# Test 'date_has_passed' function with deadline of this assignment
# and print the result
print(date_has_passed(as.Date("2020-01-23")))
# Create a variable 'birthdays' that contains a list of birthdays of each person
# in my immediate familiy and print out the result
birthdays <- list(
Kristy = as.Date("1999-12-04"),
Jeff = as.Date("1963-02-26"),
Dolly = as.Date("1963-10-19")
)
print(birthdays)
# Create a function 'get_next_birthday' that expects a single birthday and returns the
# person's next birthday
get_next_birthday <- function(birthdate){
next_birthdate <- change_year(as.Date(birthdate), 2020)
if(date_has_passed(as.Date(next_birthdate) == TRUE) {
next_birthdate <- change_year(as.Date(birthdate), 2021)
}
return(next_birthdate)
}
# Test 'get_next_birthday' with my own birthday
print(get_next_birthday(birthdays$Kristy))
# Create a variable 'next_birthdays' that contains a list of next birthdays
# for each family member in 'birthdays' list and print the results
next_birthdays <- lapply(birthdays, get_next_birthday)
get_next_birthday <- function(birthdate){
next_birthdate <- change_year(as.Date(birthdate), 2020)
if(date_has_passed(as.Date(next_birthdate) == TRUE) {
next_birthdate <- change_year(as.Date(birthdate), 2021)
}
return(next_birthdate)
}
# Test 'get_next_birthday' with my own birthday
print(get_next_birthday(birthdays$Kristy))
get_next_birthday <- function(birthdate){
next_birthdate <- change_year(as.Date(birthdate), 2020)
if(date_has_passed(as.Date(next_birthdate) == TRUE) {
next_birthdate <- change_year(as.Date(birthdate), 2021)
}
return(next_birthdate)
}
# Create a variable 'next_birthdays' that contains a list of next birthdays
# for each family member in 'birthdays' list and print the results
next_birthdays <- lapply(birthdays, get_next_birthday)
# install 'stringr' library
install.packages("stringr")
library(stringr)
#################
#### PART 1 #####
#################
# Create a variable 'my_age' and assign my age, 20, to it
my_age <- 20
# Create a varible 'my_name' and assign my name to it
my_name <- "Kristy"
# Define a function 'make_introduction' that takes 2 arguemts, name and age, and
# return the string with the varibles inputted into it
make_introduction <- function(name, age){
intro <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(intro)
}
# Create a varible 'my_intro' for the result of 'make_introduction()' and print it
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Create a varible 'casual_intro' and print the results
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
# Create a varible 'capital_intro' that capitalizes 'my_intro' and print it
capital_intro <- str_to_title(my_intro)
print(capital_intro)
# Create a variable 'intro_e_count' that stores number 'e'
# in 'my_intro' and print the varible
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
# Create a variable 'books' for a vector with 6 books assigned to it
# and print the variable
books <- c("Gone Girl", "1984", "The Handmaid's Tale", "The Giver",
"The Thing Around Your Neck", "Looking for Alaska")
print(books)
# Create a variable 'top_three_books' that contains the first 3 books
# and print the variable
top_three_books <- books[1:3]
print(top_three_books)
# Create a variable 'book_reviews' and print the variable
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
# Define a function 'remove_book' that expects 2 arguments, book titles
# and an index number
remove_book <- function(titles, index){
new_books <- titles[-index]
return(new_books)
}
# Create a variable 'books_without_five' and print
# the results
books_without_five <- remove_book(books,5)
print(books_without_five)
# Create a variable 'long_titles' for titles longer than 15 characters,
# and print the result
long_titles <- str_length(books) > 15
print(books[long_titles])
#################
#### PART 3 #####
#################
# Create a variable 'numbers' for a vector of numbers 1 to 201
numbers <- seq(1:201)
# Create a variable 'squared_numbers' with values in 'numbers' squared
squared_numbers <- numbers * numbers
# Create a variable 'squared_mean' with the average of 'squared_numbers'
# and print the result
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Create a variable 'squared_median' with the median of 'squared_numbers'
# and print the result
squared_median <- median(squared_numbers)
print(squared_median)
# Create a variable 'perfect_squares' with perfect squares in 'numbers'
# and print the result
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(numbers[perfect_squares])
#################
#### PART 4 #####
#################
# Create a variable 'spring_break' for the first day of Spring Break
spring_break <- as.Date("2020-03-21")
# Create a variable 'today' that represents the current date
today <- as.Date("2020-01-21")
# Create a variable 'days_to_break' that represents the amount of time
# from the current date until break and print the result
days_to_break <- difftime(spring_break, today)
print(days_to_break)
# Define a function 'change_year' that expects a date and year
# and returns a new date with the year passed through
change_year <- function(date, year){
date_as_string <- paste0(year, substr(as.character(date), 5, 10))
return(as.Date(date_as_string))
}
# Create a variable 'spring_break_2025' to test function 'change_year'
spring_break_2025 <- change_year(spring_break, 2025)
class(spring_break_2025)
# Define a function 'date_has_passed' that expects 1 argument, and returns a boolean for
# whether the event occurred already or not
current_date <- as.Date("2020-01-22")
date_has_passed <- function(passed_date){
occurred <- (current_date - passed_date) > 0
return(occurred)
}
# Test 'date_has_passed' function with deadline of this assignment
# and print the result
print(date_has_passed(as.Date("2020-01-23")))
# Create a variable 'birthdays' that contains a list of birthdays of each person
# in my immediate familiy and print out the result
birthdays <- list(
Kristy = as.Date("1999-12-04"),
Jeff = as.Date("1963-02-26"),
Dolly = as.Date("1963-10-19")
)
print(birthdays)
# Create a function 'get_next_birthday' that expects a single birthday and returns the
# person's next birthday
get_next_birthday <- function(birthdate){
next_birthdate <- change_year(as.Date(birthdate), 2020)
if(date_has_passed(as.Date(next_birthdate) == TRUE) {
next_birthdate <- change_year(as.Date(birthdate), 2021)
}
return(next_birthdate)
}
# Test 'get_next_birthday' with my own birthday
print(get_next_birthday(birthdays$Kristy))
# Create a variable 'next_birthdays' that contains a list of next birthdays
# for each family member in 'birthdays' list and print the results
next_birthdays <- lapply(birthdays, get_next_birthday)
install.packages("stringr")
# install 'stringr' library
install.packages("stringr")
library(stringr)
#################
#### PART 1 #####
#################
# Create a variable 'my_age' and assign my age, 20, to it
my_age <- 20
# Create a varible 'my_name' and assign my name to it
my_name <- "Kristy"
# Define a function 'make_introduction' that takes 2 arguemts, name and age, and
# return the string with the varibles inputted into it
make_introduction <- function(name, age){
intro <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(intro)
}
# Create a varible 'my_intro' for the result of 'make_introduction()' and print it
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Create a varible 'casual_intro' and print the results
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
# Create a varible 'capital_intro' that capitalizes 'my_intro' and print it
capital_intro <- str_to_title(my_intro)
print(capital_intro)
# Create a variable 'intro_e_count' that stores number 'e'
# in 'my_intro' and print the varible
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
# Create a variable 'books' for a vector with 6 books assigned to it
# and print the variable
books <- c("Gone Girl", "1984", "The Handmaid's Tale", "The Giver",
"The Thing Around Your Neck", "Looking for Alaska")
print(books)
# Create a variable 'top_three_books' that contains the first 3 books
# and print the variable
top_three_books <- books[1:3]
print(top_three_books)
# Create a variable 'book_reviews' and print the variable
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
# Define a function 'remove_book' that expects 2 arguments, book titles
# and an index number
remove_book <- function(titles, index){
new_books <- titles[-index]
return(new_books)
}
# Create a variable 'books_without_five' and print
# the results
books_without_five <- remove_book(books,5)
print(books_without_five)
# Create a variable 'long_titles' for titles longer than 15 characters,
# and print the result
long_titles <- str_length(books) > 15
print(books[long_titles])
#################
#### PART 3 #####
#################
# Create a variable 'numbers' for a vector of numbers 1 to 201
numbers <- seq(1:201)
# Create a variable 'squared_numbers' with values in 'numbers' squared
squared_numbers <- numbers * numbers
# Create a variable 'squared_mean' with the average of 'squared_numbers'
# and print the result
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Create a variable 'squared_median' with the median of 'squared_numbers'
# and print the result
squared_median <- median(squared_numbers)
print(squared_median)
# Create a variable 'perfect_squares' with perfect squares in 'numbers'
# and print the result
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(numbers[perfect_squares])
#################
#### PART 4 #####
#################
# Create a variable 'spring_break' for the first day of Spring Break
spring_break <- as.Date("2020-03-21")
# Create a variable 'today' that represents the current date
today <- as.Date("2020-01-21")
# Create a variable 'days_to_break' that represents the amount of time
# from the current date until break and print the result
days_to_break <- difftime(spring_break, today)
print(days_to_break)
# Define a function 'change_year' that expects a date and year
# and returns a new date with the year passed through
change_year <- function(date, year){
date_as_string <- paste0(year, substr(as.character(date), 5, 10))
return(as.Date(date_as_string))
}
# Create a variable 'spring_break_2025' to test function 'change_year'
spring_break_2025 <- change_year(spring_break, 2025)
class(spring_break_2025)
# Define a function 'date_has_passed' that expects 1 argument, and returns a boolean for
# whether the event occurred already or not
current_date <- as.Date("2020-01-22")
date_has_passed <- function(passed_date){
occurred <- (current_date - passed_date) > 0
return(occurred)
}
# Test 'date_has_passed' function with deadline of this assignment
# and print the result
print(date_has_passed(as.Date("2020-01-23")))
# Create a variable 'birthdays' that contains a list of birthdays of each person
# in my immediate familiy and print out the result
birthdays <- list(
Kristy = as.Date("1999-12-04"),
Jeff = as.Date("1963-02-26"),
Dolly = as.Date("1963-10-19")
)
print(birthdays)
# Create a function 'get_next_birthday' that expects a single birthday and returns the
# person's next birthday
get_next_birthday <- function(birthdate){
next_birthdate <- change_year(as.Date(birthdate), 2020)
if(date_has_passed(as.Date(next_birthdate) == TRUE) {
next_birthdate <- change_year(as.Date(birthdate), 2021)
}
return(next_birthdate)
}
# Test 'get_next_birthday' with my own birthday
print(get_next_birthday(birthdays$Kristy))
# Create a variable 'next_birthdays' that contains a list of next birthdays
# for each family member in 'birthdays' list and print the results
next_birthdays <- lapply(birthdays, get_next_birthday)
get_next_birthday <- function(birthdate){
next_birthdate <- change_year(as.Date(birthdate), 2020)
if(date_has_passed(as.Date(next_birthdate)) == TRUE) {
next_birthdate <- change_year(as.Date(birthdate), 2021)
}
return(next_birthdate)
}
# Test 'get_next_birthday' with my own birthday
print(get_next_birthday(birthdays$Kristy))
get_next_birthday <- function(birthdate){
next_birthdate <- change_year(as.Date(birthdate), 2020)
if(date_has_passed(as.Date(next_birthdate)) == TRUE) {
next_birthdate <- change_year(as.Date(birthdate), 2021)
}
return(next_birthdate)
}
# Test 'get_next_birthday' with my own birthday
print(get_next_birthday(birthdays$Kristy))
# Create a variable 'next_birthdays' that contains a list of next birthdays
# for each family member in 'birthdays' list and print the results
next_birthdays <- lapply(birthdays, get_next_birthday)
View(next_birthdays)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(40000, 50000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
print(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2018 <- salaries_2017 + adjustments
salaries <- data.frame(employees, salaries_2017, adjustments, salaries_2018, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
raise <- salaries_2017 < salaries_2018 == TRUE
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
raise <- salaries_2017 < salaries_2018 == TRUE
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
raise <- (salaries_2017 < salaries_2018) == TRUE
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
view(salaries)
view(salaries)
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries$adjustment > 0
View(salaries)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == "Employee 57", "salaries_2018"])
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries$adjustment > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == "Employee 57", "salaries_2018"])
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# How many employees got a raise?
nrow(salaries[slaries$raise == TRUE])
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE])
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE, ])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max()]
biggest_raise <- max(salaries$adjustments)
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(biggest_raise)]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == biggest_raise]
salaries[ salaries$adjustments == biggest_raise]
# What was the dollar value of the highest raise?
biggest_raise <- max(salaries$adjustments)
salaries[ salaries$adjustments == biggest_raise]
# What was the dollar value of the highest raise?
salaries[ salaries$adjustments == max(salaries$adjustments)]
# What was the dollar value of the highest raise?
salaries[ salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustmments), "name"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustmments), "employee"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employee"]
View(salaries)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$adjustments == min(salaries$adjustments), "adjustments"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustments == min(salaries$adjustments), "employees"]
# For people who did not get a raise, how much money did they lose on average?
salaries[salaries$raise == FALSE]
# For people who did not get a raise, how much money did they lose on average?
salaries[salaries$raise == FALSE, "raise"]
# For people who did not get a raise, how much money did they lose on average?
salaries[salaries$raise == FALSE, ]
# What was the average salary change?
mean(salaries$adjustments)
paycut <- salaries[salaries$raise == FALSE, ]
mean(paycut$adjustments)
setwd("~/Desktop/book-exercises/chapter-10-exercises/exercise-2")
getwd()
